# 1 Geef pipeline een naam

name: CI/CD Demo Pipeline Github Actions
run-name: ${{ github.actor }} is testing out GitHub Actions 🚀

# 1 Declareer variabelen
#   Environment Variabelen on global, jobs and step level
# 2 Configureer de trigger


on:
  # workflow_dispatch:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# permissions:
#   contents: read
#   actions: read
#   checks: write

jobs:
  build:
    env:
      BUILD_CONFIG: 'Release'
      SOLUTION: 'PipelineDemo.sln'
    runs-on: ubuntu-latest
    steps:

    # - uses: actions/checkout@v3
    # - name: Set up Python 3.12.1
    #   uses: actions/setup-python@v3
    #   with:
    #       python-version: 3.12.1

    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore -c Release

    - name: Test
      run: dotnet test $SOLUTION --configuration $BUILD_CONFIG --no-restore --no-build --verbosity normal

    # Test Reporter
    - uses: actions/checkout@v3         # checkout the repo
    - run: npm ci                       # install packages
    - run: npm test                     # run tests (configured to use jest-junit reporter)
    - uses: actions/upload-artifact@v3  # upload test results
      if: success() || failure()        # run this step even if previous step failed
      with:
          name: test-results
          path: jest-junit.xml
  



  
    


